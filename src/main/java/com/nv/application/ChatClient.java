/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatClient.java
 *
 * Created on 17 Apr, 2017, 8:34:43 PM
 */
package com.nv.application;

//import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.awt.event.*;
import java.io.*;
import java.net.Socket;
import javax.swing.*;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.*;
import java.security.spec.*;
import java.util.*;
//import sun.misc.BASE64Decoder;
//import sun.misc.BASE64Encoder;
import java.util.Base64;

/**
 *
 * @author nareen
 */
public class ChatClient extends javax.swing.JFrame {

    private PrivateKey myPrivateKey;
    private PublicKey myPublicKey;
    private PublicKey otherPublicKey;
    private byte[] key = new byte[8];
    private BufferedReader in;
    private PrintWriter out;
    private byte[] ivBytes = new byte[]{0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00};
    private String passPhrase = "password";
    private Socket socket;
    private Thread readThread = new Thread(new readThread());

    /** Creates new form ChatClient */
    public ChatClient() {
        initComponents();
        button2.enable(false);
        label6.setText(null);
        label7.setText(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label4 = new java.awt.Label();
        textField6 = new java.awt.TextField();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();
        textField5 = new java.awt.TextField();
        label3 = new java.awt.Label();
        textField4 = new java.awt.TextField();
        textField2 = new java.awt.TextField();
        label1 = new java.awt.Label();
        Password = new java.awt.Label();
        textField1 = new java.awt.TextField();
        textField3 = new java.awt.TextField();
        label2 = new java.awt.Label();
        textArea1 = new java.awt.TextArea();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Secure Instant Point-to-Point (P2P) Messaging Tool");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(-1664101,true));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label4.setFont(new java.awt.Font("Dialog", 0, 14));
        label4.setText("Connect To :");
        getContentPane().add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 77, -1, -1));

        textField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField6ActionPerformed(evt);
            }
        });
        getContentPane().add(textField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(861, 77, 132, -1));

        button1.setFont(new java.awt.Font("Dialog", 0, 14));
        button1.setLabel("Connect");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        getContentPane().add(button1, new org.netbeans.lib.awtextra.AbsoluteConstraints(647, 159, 78, -1));

        button2.setFont(new java.awt.Font("Dialog", 0, 18));
        button2.setLabel("Send");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        getContentPane().add(button2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 210, -1, -1));

        textField5.setFont(new java.awt.Font("Dialog", 0, 14));
        textField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField5ActionPerformed(evt);
            }
        });
        getContentPane().add(textField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 216, 880, -1));

        label3.setFont(new java.awt.Font("Dialog", 0, 14));
        label3.setText("Port :");
        getContentPane().add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 159, -1, -1));

        textField4.setFont(new java.awt.Font("Dialog", 0, 14));
        textField4.setText("localhost");
        textField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField4ActionPerformed(evt);
            }
        });
        getContentPane().add(textField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 101, -1));

        textField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField2ActionPerformed(evt);
            }
        });
        getContentPane().add(textField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 108, 156, -1));

        label1.setFont(new java.awt.Font("Dialog", 0, 14));
        label1.setText("Password :");
        getContentPane().add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 70, 30));

        Password.setFont(new java.awt.Font("Dialog", 0, 14));
        Password.setName(""); // NOI18N
        Password.setText("UserName :");
        getContentPane().add(Password, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 53, 80, 30));

        textField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField1ActionPerformed(evt);
            }
        });
        getContentPane().add(textField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 56, 156, -1));

        textField3.setFocusable(false);
        textField3.setFont(new java.awt.Font("Dialog", 0, 14));
        textField3.setText("3000");
        textField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField3ActionPerformed(evt);
            }
        });
        getContentPane().add(textField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 159, 62, -1));

        label2.setFont(new java.awt.Font("Dialog", 0, 14));
        label2.setText("Server IP :");
        getContentPane().add(label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, -1, -1));

        textArea1.setFont(new java.awt.Font("Dialog", 0, 14));
        getContentPane().add(textArea1, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 271, 1204, 377));

        label5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        label5.setFocusable(false);
        label5.setFont(new java.awt.Font("Serif", 1, 14));
        label5.setForeground(new java.awt.Color(-65536,true));
        getContentPane().add(label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, -1, -1));

        label6.setFont(new java.awt.Font("SansSerif", 1, 14));
        label6.setForeground(new java.awt.Color(-65536,true));
        label6.setText("label6");
        getContentPane().add(label6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 800, -1));

        label7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label7.setForeground(new java.awt.Color(-16282802,true));
        label7.setText("label7");
        getContentPane().add(label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 30, 200, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField6ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textField6ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        label6.setText(null);
        if (textField2.getText().equals(passPhrase)) {
            try {
                socket = new Socket(textField4.getText(), Integer.parseInt(textField3.getText()));
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                out = new PrintWriter(socket.getOutputStream(), true);
                while (true) {
                    String line = in.readLine();
                    if (line.equals("Enter unique ID or your Name")) {
                        out.println(textField1.getText());
                    } else if (line.equals("invalid Name or ID") || line.equals("Name or ID already taken")) {
                        label6.setText("       * " + line);
                        //textArea1.append(line+ "\n");
                        textField1.setEditable(true);
                        button1.setFocusable(true);
                    } else if (line.equals("Enter unique ID of person you want to connect to:")) {
                        out.println(textField6.getText());
                    } else if (line.equals("invalid Name or ID of Client")) {
                        label6.setText("        * " + line);
                        //textArea1.append(line+ "\n");
                        textField6.setEditable(true);
                        button1.setFocusable(true);
                    } else if(line.equals("Connected")) {
                        textField5.setEditable(true);
                        button2.enable(true);
                        //button3.enable(true);
                        button1.enable(false);
                        label7.setText("CONNECTED");
                        readThread.start();
                        break;
                    }
                    else if(line!=null) {
                        textField5.setEditable(true);
                        button2.enable(true);
                        //button3.enable(true);
                        //button1.enable(false);
                        textArea1.append(line + "\n");
                        readThread.start();
                        break;
                    }
                }
                //run();
            } catch (Exception e) {
            }
        } else {
            label6.setText("       * Wrong Password");
        }
}//GEN-LAST:event_button1ActionPerformed

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:
        if (textField5.getText() != null) {
            try {
                out.println(Encrypt(textField5.getText()));
            } catch (Exception e) {
            }
            textArea1.append("Me : " + textField5.getText() + "\n");
            textField5.setText(null);
        }
}//GEN-LAST:event_button2ActionPerformed

    private void textField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField5ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textField5ActionPerformed

    private void textField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField4ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textField4ActionPerformed

    private void textField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField2ActionPerformed
}//GEN-LAST:event_textField2ActionPerformed

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textField1ActionPerformed

    private void textField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField3ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_textField3ActionPerformed

    private void keyExchange() {
        try {
            final KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DH");
            keyPairGen.initialize(1024);

            final KeyPair pair = keyPairGen.generateKeyPair();

            myPrivateKey = pair.getPrivate();
            myPublicKey = pair.getPublic();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private String Encrypt(String message) throws Exception {
        byte[] array = null;
        byte[] messageDec = null;
        try {
            final SecretKeySpec spec = new SecretKeySpec(key, "DES");
            final Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding", "SunJCE");
            IvParameterSpec iVSpec = new IvParameterSpec(ivBytes);
            cipher.init(Cipher.ENCRYPT_MODE, spec, iVSpec);
            array = message.getBytes("UTF8");
            messageDec = cipher.doFinal(array);
        } catch (Exception e) {
            System.out.println(e);
        }
        return (new String(Base64.getEncoder().encode(messageDec)));
    }

    private String Decrypt(String message) throws Exception {
        byte[] messageEnc = null;
        try {
            final SecretKeySpec spec = new SecretKeySpec(key, "DES");
            final Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding", "SunJCE");
            IvParameterSpec iVSpec = new IvParameterSpec(ivBytes);
            cipher.init(Cipher.DECRYPT_MODE, spec, iVSpec);

            messageEnc = cipher.doFinal(Base64.getDecoder().decode(message.getBytes()));
        } catch (Exception e) {
            System.out.println(e);
        }
        return (new String(messageEnc, "UTF8"));
    }

    public static PublicKey getKey(String key) {
        try {
            System.out.println(key);
            //BASE64Decoder decoder = new BASE64Decoder();
            byte[] publicKeyBytes = Base64.getDecoder().decode(key.getBytes("UTF-8"));//decoder.decodeBuffer(key);//key.getBytes();//
            KeyFactory keyFactory = KeyFactory.getInstance("DH");
            EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
            PublicKey publicKey2 = keyFactory.generatePublic(publicKeySpec);
            return publicKey2;
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    public static String getStringKey(PublicKey publ) throws Exception {
        KeyFactory fact = KeyFactory.getInstance("DH");
        X509EncodedKeySpec spec = fact.getKeySpec(publ, X509EncodedKeySpec.class);
        return new String(Base64.getEncoder().encode(spec.getEncoded()));
    }

    public class readThread implements Runnable {
        @Override
        public void run() {
            int i = 0;
            while (true) {
                try {
                    String encryptedLine = in.readLine();
                    if (encryptedLine != null) {
                        if (encryptedLine.equals("Key Exchange")) {
                            textArea1.append("New Key Exchanged\n");
                            i = 1;
                            keyExchange();
                            out.println(getStringKey(myPublicKey));
                            out.println("Exchange Completed");
                        } else if (i == 1) {
                            while (true) {
                                String text = in.readLine();
                                if (!text.equals("Exchange Completed")) {
                                    encryptedLine = encryptedLine.concat(text);
                                } else {
                                    break;
                                }
                            }
                            otherPublicKey = getKey(encryptedLine);
                            final KeyAgreement keyAgree = KeyAgreement.getInstance("DH");
                            keyAgree.init(myPrivateKey);
                            keyAgree.doPhase(otherPublicKey, true);
                            System.arraycopy(keyAgree.generateSecret(), 0, key, 0, key.length);
                            System.out.println("Key: " + new String(key));
                            i = 0;

                        } else if (encryptedLine.equals("Connected")) {
                            label7.setText("    CONNECTED");
                        } else if (encryptedLine.equals("Disconnected")) {
                            button2.enable(false);
                            button1.enable(true);
                            label7.setText(null);
                            textArea1.append(encryptedLine + "\n");
                        } else {
                            String line = Decrypt(encryptedLine);
                            if (line != null) {
                                textArea1.append(textField6.getText() + " : " + line + "\n" + encryptedLine + "\n");
                            }
                        }

                    }
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatClient().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label Password;
    private java.awt.Button button1;
    private java.awt.Button button2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.TextArea textArea1;
    private java.awt.TextField textField1;
    private java.awt.TextField textField2;
    private java.awt.TextField textField3;
    private java.awt.TextField textField4;
    private java.awt.TextField textField5;
    private java.awt.TextField textField6;
    // End of variables declaration//GEN-END:variables
}
